#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('wecoown-admin-penal:server');
var http = require('http');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || 3000);
console.log("Server running on: ", port);

app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);

var io = require('socket.io').listen(server);
var index = require('../controllers/index.controller');

io.on('connection', (socket) => {
  console.log('a user connected');
  socket.on('disconnect', () => {
    console.log('user disconnected');
  });
  socket.on('data', async (msg) => {
    try {
      let parseData = JSON.parse(msg)
      console.log("parseData ", parseData);

      // io.socket.emit('my broadcast', msg);

      let getreturnVal = await index.getSenderMessage(parseData);
      console.log(getreturnVal, "getreturnVal")
      if (getreturnVal.success == true) {
        io.emit('Mybroadcast', {
          message: getreturnVal.message,
          sender_name: getreturnVal.sender_name,
          new_id: parseData.new_id,
          sender_image: parseData.sender_image
        });
      }
      console.log("return of function : ", getreturnVal);
    } catch (error) {
      console.log("error in socket : ", error);
    }
  });

  socket.on('receivedMark', async (m) => {
    try {
      let data = JSON.parse(m);
      var results = await index.markRead(data.ids);
      io.emit('messageRead', {
        ids: data.ids,
        chat_id: data.chat_id,
        receiver_id: data.receiver_id
      })
    } catch (error) {
      console.log(error);
    }
  })
  // for delete chat message 
  socket.on('deleteChatMessage', async (m) => {
    try {
      let data = JSON.parse(m);
      var results = await index.deleteChatMessage(data.ids);
      io.emit('messageDelete', {
        ids: data.ids,
        chat_id: data.chat_id,
        recevier_id: data.recevier_id
      }) 
    } catch (error) {
      console.log(error);
    }
  })
    // for edit chat message 
    socket.on('editChatMessage', async (m) => {
      try {
        let data = JSON.parse(m);
        var results = await index.editChatMessage(data);
        io.emit('messageEdit', {
          chat_id: data.chat_id,
          recevier_id: data.recevier_id,
          message_id: data.message_id,
          chat_message: data.chat_message,
        })
      } catch (error) {
        console.log(error);
      }
    })
});

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}